apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: yap-frontend-ingress
  namespace: default
  annotations:
    # AWS Load Balancer Controller annotations
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:486276252245:certificate/208ec60d-e0c7-4f61-833b-2aeb4aecbcb1
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    # Health check annotations
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    # Additional security and performance
    alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=60
    alb.ingress.kubernetes.io/tags: Environment=production,Project=YAP,ManagedBy=kubernetes
spec:
  rules:
  - host: delta-sandbox-7k3m.goyap.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: yap-frontend-service
            port:
              number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: yap-frontend-service
  namespace: default
  labels:
    app: yap-frontend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: yap-frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: yap-frontend
  namespace: default
  labels:
    app: yap-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: yap-frontend
  template:
    metadata:
      labels:
        app: yap-frontend
    spec:
      containers:
      - name: yap-frontend
        image: 486276252245.dkr.ecr.us-east-1.amazonaws.com/yap-frontend:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
