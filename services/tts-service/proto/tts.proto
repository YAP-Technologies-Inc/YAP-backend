syntax = "proto3";

package tts;

service TTSService {
  // Generates speech from text
  rpc GenerateSpeech (TTSRequest) returns (TTSResponse) {}
  
  // Generates sample pronunciation for a phoneme or word
  rpc GeneratePhonemeAudio (PhonemeAudioRequest) returns (TTSResponse) {}
  
  // Lists available voices for a language
  rpc ListVoices (ListVoicesRequest) returns (ListVoicesResponse) {}
  
  // Health check endpoint
  rpc HealthCheck (HealthCheckRequest) returns (HealthCheckResponse) {}
}

message TTSRequest {
  string text = 1;              // Text to synthesize
  string language_code = 2;     // Language code (e.g., "en-US", "es-ES")
  string voice_id = 3;          // Optional: Specific voice to use
  string audio_format = 4;      // Format of the output audio (e.g., "wav", "mp3", "ogg") 
  float speaking_rate = 5;      // Optional: Speaking rate (0.5 to 2.0, default 1.0)
  float pitch = 6;              // Optional: Voice pitch (-10.0 to 10.0, default 0.0)
  string ssml = 7;              // Optional: SSML markup for more control over synthesis
  bool use_neural_voice = 8;    // Optional: Whether to prefer a neural voice if available
  string region_variant = 9;    // Optional: Regional variant (e.g., "es-ES", "es-MX")
}

message TTSResponse {
  bool success = 1;
  string message = 2;
  bytes audio_data = 3;         // The synthesized audio bytes
  string audio_format = 4;      // Format of the audio (e.g., "wav", "mp3", "ogg")
  float duration = 5;           // Duration of the audio in seconds
  string cache_key = 6;         // Unique cache key for this audio (can be used for future lookups)
}

message PhonemeAudioRequest {
  string phoneme = 1;           // Phoneme to synthesize (e.g., "AE", "TH")
  string word = 2;              // Optional: Word containing the phoneme for context
  string language_code = 3;     // Language code (e.g., "en-US", "es-ES")
  string voice_id = 4;          // Optional: Specific voice to use
  string audio_format = 5;      // Format of the output audio (e.g., "wav", "mp3", "ogg")
}

message Voice {
  string voice_id = 1;          // Unique identifier for the voice
  string name = 2;              // Display name for the voice
  string language_code = 3;     // Language code (e.g., "en-US", "es-ES")
  string gender = 4;            // "MALE" or "FEMALE" 
  bool neural = 5;              // Whether this is a neural voice
  string provider = 6;          // TTS provider (e.g., "aws", "google", "azure", "mozilla")
  string accent = 7;            // Optional: Regional accent (e.g., "british", "american")
}

message ListVoicesRequest {
  string language_code = 1;     // Optional: Filter by language code
  string gender = 2;            // Optional: Filter by gender ("MALE", "FEMALE")
  bool neural_only = 3;         // Optional: Filter for neural voices only
}

message ListVoicesResponse {
  bool success = 1;
  string message = 2;
  repeated Voice voices = 3;
}

message HealthCheckRequest {}

message HealthCheckResponse {
  bool status = 1;              // true if service is healthy
  string message = 2;           // Description of health status
}
