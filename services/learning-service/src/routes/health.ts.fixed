import { Router } from "express";
import { listVoices } from "../clients/tts";
import { alignText } from "../clients/alignment";
import { scorePronunciation } from "../clients/pronunciation-scorer";
import { evaluateDetailed } from "../clients/voiceScore";

const router = Router();

/**
 * GET /health
 * Simple health check endpoint
 */
router.get("/", (_req, res) => res.send("ok"));

/**
 * GET /health/deep
 * Deep health check to verify connectivity to all dependent services
 */
router.get("/deep", async (_req, res) => {
  const healthStatus = {
    timestamp: new Date().toISOString(),
    status: "ok" as "ok" | "degraded",
    services: {
      tts: { status: "unknown" as "unknown" | "ok" | "error", message: "" },
      alignment: { status: "unknown" as "unknown" | "ok" | "error", message: "" },
      scorer: { status: "unknown" as "unknown" | "ok" | "error", message: "" },
      voiceScore: { status: "unknown" as "unknown" | "ok" | "error", message: "" }
    }
  };
  
  // Create a minimal audio buffer for testing - 0.1 seconds of silence
  const testAudioBuffer = Buffer.alloc(4410); // 44100Hz * 0.1s * 1 channel

  try {
    // Check TTS service
    await listVoices("en-US");
    healthStatus.services.tts = { status: "ok", message: "Service responded successfully" };
  } catch (error: any) {
    healthStatus.services.tts = { status: "error", message: `Error connecting to TTS service: ${error.message}` };
    healthStatus.status = "degraded";
  }

  try {
    // Check alignment service with minimal sample
    await alignText(testAudioBuffer, "test", "en-US");
    healthStatus.services.alignment = { status: "ok", message: "Service responded successfully" };
  } catch (error: any) {
    healthStatus.services.alignment = { status: "error", message: `Error connecting to alignment service: ${error.message}` };
    healthStatus.status = "degraded";
  }

  try {
    // Check pronunciation scorer with minimal sample
    await scorePronunciation(testAudioBuffer, "test", "en-US");
    healthStatus.services.scorer = { status: "ok", message: "Service responded successfully" };
  } catch (error: any) {
    healthStatus.services.scorer = { status: "error", message: `Error connecting to pronunciation scorer: ${error.message}` };
    healthStatus.status = "degraded";
  }
  
  try {
    // Check voice score service with minimal sample
    await evaluateDetailed(testAudioBuffer, "test", "en-US");
    healthStatus.services.voiceScore = { status: "ok", message: "Service responded successfully" };
  } catch (error: any) {
    healthStatus.services.voiceScore = { status: "error", message: `Error connecting to voice score service: ${error.message}` };
    healthStatus.status = "degraded";
  }
  
  // Determine the overall health status
  const hasErrors = Object.values(healthStatus.services).some(service => service.status === "error");
  
  if (hasErrors) {
    res.status(503).json(healthStatus);
  } else {
    res.json(healthStatus);
  }
});

export default router;
